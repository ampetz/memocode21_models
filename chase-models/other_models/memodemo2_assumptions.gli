%Assume adversary avoids detection at our main
  %measurement event. Others can be added.

l(E) = msp(userAM, E1, uxas_mon, userAM, uxas)
 => phi(userAM, uxas, E) | phi(userAM, uxas_ctxt, E).

%Assumptions about system dependencies.

% no dependencies for components at bootMem or platAM
ctxt(bootMem, C, C2) => false.
ctxt(platAM, C, C2) => false.

% All components at userAM (except ker itself) depend on ker
ctxt(userAM, C, uxas_mon) => C = ker.
ctxt(userAM, C, uim) => C = ker.
ctxt(userAM, C, uxas_ctxt) => C = ker.

% In addition to ker, uxas depends also on uxas_ctxt
ctxt(userAM, C, uxas) => C = ker | C = uxas_ctxt.

%Axioms defining "deep" components
  %We don't want to see models with deep corruptions

% img at bootMem cannot be corrupted
phi(bootMem, img, E) => false.

%% If considering bootMem corruptions, must happen before query_img
%l(E) = cor(bootMem, img) & l(E2) = msp(platAM, E1, query_img, bootMem, img) => prec(E,E2).

% The only way components at platAM are corrupt is if the boot image (img) is corrupt
l(E) = cor(platAM, C) => phi(bootMem, img, E).

% Only way for userspace integrity measurer to become corrupt is via a kernel corruption
l(E) = cor(userAM, uim) => phi(userAM, ker, E).

% Toggle off to consider attacks that corrupt ker
l(E) = cor(userAM, ker) => false.

%Axioms about names

query_img = img => false.
query_img = kim => false.
query_img = ker => false.
query_img = uim => false.
query_img = uxas_mon => false.
query_img = uxas_ctxt => false.
query_img = uxas => false.
img = kim => false.
img = ker => false.
img = uim => false.
img = uxas_mon => false.
img = uxas_ctxt => false.
img = uxas => false.
kim = ker => false.
kim = uim => false.
kim = uxas_mon => false.
kim = uxas_ctxt => false.
kim = uxas => false.
ker = uim => false.
ker = uxas_mon => false.
ker = uxas_ctxt => false.
ker = uxas => false.
uim = uxas_mon => false.
uim = uxas_ctxt => false.
uim = uxas => false.
uxas_mon = uxas_ctxt => false.
uxas_mon = uxas => false.
uxas_ctxt = uxas => false.